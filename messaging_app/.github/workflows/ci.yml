# Configure a GitHub Actions workflow that runs the Django tests on every push and pull request.
# Ensure the workflow installs necessary dependencies and sets up a MySQL database for running tests (e.g., using services in GitHub Actions).
name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: messaging_db
          MYSQL_USER: messaging_user
          MYSQL_PASSWORD: messaging_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h  localhost -u root --silent"
          --health-interval=30s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run migrations
        run: |
          python manage.py migrate
      - name: Run tests
        run: |
          python manage.py test
      - name: Collect static files
        run: |
          python manage.py collectstatic --noinput
      - name: Check for static files
        run: |
          if [ ! -d "staticfiles" ]; then
            echo "Static files directory does not exist."
            exit 1
          else
            echo "Static files directory exists."
          fi
      - name: Check for migrations
        run: |
          if [ -z "$(python manage.py showmigrations | grep '\[X\]')" ]; then
            echo "No migrations have been applied."
            exit 1
          else
            echo "Migrations have been applied."
          fi
      - name: Check for database connection
        run: |      
          python -c "import os
          import mysql.connector
          try:
              conn = mysql.connector.connect(
                  host=os.getenv('DB_HOST', 'localhost'),
                  user=os.getenv('DB_USER', 'messaging_user'),
                  password=os.getenv('DB_PASSWORD', 'messaging_password'),
                  database=os.getenv('DB_NAME', 'messaging_db')
              )
              print('Database connection successful.')
            except mysql.connector.Error as err:
              print(f'Error: {err}')
              exit(1)"
      - name: Check for environment variables
        run: |
          if [ -z "$DB_HOST" ] || [ -z "$DB_NAME" ] || [ -z "$DB_USER" ] || [ -z "$DB_PASSWORD" ]; then
            echo "One or more environment variables are not set."
            exit 1
          else
            echo "All required environment variables are set."
          fi
      - name: Check for Dockerfile
        run: |
          if [ ! -f "Dockerfile" ]; then
            echo "Dockerfile does not exist."
            exit 1
          else
            echo "Dockerfile exists."
          fi
      - name: Check for deployment.yaml
        run: |
          if [ ! -f "deployment.yaml" ]; then
            echo "deployment.yaml does not exist."
            exit 1
          else
            echo "deployment.yaml exists."
          fi
      - name: Check for blue_deployment.yaml
        run: |
          if [ ! -f "blue_deployment.yaml" ]; then
            echo "blue_deployment.yaml does not exist."
            exit 1
          else
            echo "blue_deployment.yaml exists."
          fi
      - name: Check for green_deployment.yaml
        run: |
          if [ ! -f "green_deployment.yaml" ]; then
            echo "green_deployment.yaml does not exist."
            exit 1
          else
            echo "green_deployment.yaml exists."
          fi
      - name: Check for service.yaml
        run: |
          if [ ! -f "service.yaml" ]; then
            echo "service.yaml does not exist."
            exit 1
          else
            echo "service.yaml exists."
          fi
      - name: Check for blue_service.yaml
        run: |
          if [ ! -f "blue_service.yaml" ]; then
            echo "blue_service.yaml does not exist."
            exit 1
          else
            echo "blue_service.yaml exists."
          fi
      - name: Check for green_service.yaml
        run: |
          if [ ! -f "green_service.yaml" ]; then
            echo "green_service.yaml does not exist."
            exit 1
          else
            echo "green_service.yaml exists."
          fi
      - name: Check for README.md
        run: |
          if [ ! -f "README.md" ]; then
            echo "README.md does not exist."
            exit 1
          else
            echo "README.md exists."
          fi
      - name: Check for requirements.txt
        run: |
          if [ ! -f "requirements.txt" ]; then
            echo "requirements.txt does not exist."
            exit 1
          else
            echo "requirements.txt exists."
          fi
      - name: Check for .gitignore
        run: |
          if [ ! -f ".gitignore" ]; then
            echo ".gitignore does not exist."
            exit 1
          else
            echo ".gitignore exists."
          fi
      - name: Check for .env.example        
        run: |
          if [ ! -f ".env.example" ]; then
            echo ".env.example does not exist."
            exit 1
          else
            echo ".env.example exists."
          fi
      - name: Check for .github/workflows/ci.yml
        run: |
          if [ ! -f ".github/workflows/ci.yml" ]; then
            echo ".github/workflows/ci.yml does not exist."
            exit 1
          else
            echo ".github/workflows/ci.yml exists."
          fi
      - name: Check for .github/workflows/deploy_blue.yml
        run: |
          if [ ! -f ".github/workflows/deploy_blue.yml" ]; then
            echo ".github/workflows/deploy_blue.yml does not exist."
            exit 1
          else
            echo ".github/workflows/deploy_blue.yml exists."
          fi
      - name: Check for .github/workflows/deploy_green.yml
        run: |
          if [ ! -f ".github/workflows/deploy_green.yml" ]; then
            echo ".github/workflows/deploy_green.yml does not exist."
            exit 1
          else
            echo ".github/workflows/deploy_green.yml exists."
          fi
      - name: Check for .github/workflows/blue_green_deployment.yml
        run: |
          if [ ! -f ".github/workflows/blue_green_deployment.yml" ]; then   
            echo ".github/workflows/blue_green_deployment.yml does not exist."
            exit 1
          else
            echo ".github/workflows/blue_green_deployment.yml exists."
          fi