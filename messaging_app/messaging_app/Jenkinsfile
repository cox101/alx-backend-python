pipeline {
    agent any

    environment {
        VENV_DIR = "${env.WORKSPACE}/venv"
        IMAGE_NAME = 'dockerhub_user/messaging-app' // Replace with your actual Docker Hub image name
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    stages {
        stage('Clone Repository') {
            steps {
                git credentialsId: 'github-creds', url: 'https://github.com/YOUR_USERNAME/alx-backend-python.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                withPythonEnv("${VENV_DIR}") {
                    sh 'pip install --upgrade pip'
                    sh 'pip install -r messaging_app/requirements.txt'
                }
            }
        }

        stage('Run Tests') {
            steps {
                withPythonEnv("${VENV_DIR}") {
                    sh 'pytest messaging_app/tests/ --junitxml=test-results.xml'
                }
            }
            post {
                always {
                    junit 'test-results.xml'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                    docker build -t ${IMAGE_NAME}:latest -f messaging_app/Dockerfile .
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    docker push ${IMAGE_NAME}:latest
                    docker logout
                    """
                }
            }
        }
    }
}
